
# graph embeeded in window:
# PY + QT https://stackoverflow.com/questions/34621190/how-to-embed-a-plot-directly-into-a-window-python-qt
# matplotlib support for embeeding graphs into guis: https://matplotlib.org/stable/gallery/user_interfaces/index.html
# "Currently Matplotlib supports PyQt/PySide, PyGObject, Tkinter, and wxPython"

# Seems like Python + Qt is quite popular

# ---------------
#     ZADANIA
# ---------------

# 1 ----
# Napisać program ilustrujący działanie algorytmu k-najbliższych sąsiadów. Program powinien pozwalać na wybór następujących parametrów:
#     - liczby sąsiadów k (od 1 do 20),
#     - rodzaju metryki (euklidesowa lub miejska),
#     - rodzaju głosowania (proste lub ważone odwrotnością kwadratu odległości).
#
# Użytkownik wczytuje z pliku tekstowego zbiór uczący. Program normalizuje zmienne i wyświetla obserwacje na ekranie w postaci okrągłych
#   kolorowych punktów (należy zadbać o odpowiednie przeskalowanie, żeby punkty były dobrze widoczne i umieszczone centralnie). Obserwacje
#   należące do poszczególnych kategorii powinny być oznaczone różnymi kolorami. Po ustawieniu parametrów klasyfikatora użytkownik klika w
#   dowolne miejsce obszaru, na którym wyświetlane są obserwacje. Program zaznacza kliknięty punkt kwadratem, dokonuje klasyfikacji obserwacji
#   odpowiadającej klikniętemu punktowi, oznacza go kolorem odpowiadającym wyznaczonej kategorii, wyróżnia sąsiadów, na podstawie których
#   została dokonana klasyfikacja oraz pokazuje odległości do nich. Program pozwala na klikanie dowolną liczbę razy. (Wyróżniane są punkty i
#   odległości tylko do ostatniego z klikniętych przez użytkownika punktów).
#
#   Każdy z wierszy pliku zawierającego zbiór uczący zawiera 3-elementowy ciąg liczb oddzielonych przecinkami. Pierwsze 2 elementy tego
#     ciągu to liczby rzeczywiste oznaczające wartości zmiennych opisujących. Trzeci element to liczba naturalna z zakresu 0-5 oznaczająca
# 	  wartość zmiennej celu - kategorię do której należy dana obserwacja.
#   Klasyfikacja nowych obserwacji powinna być dokonywana tylko na podstawie obserwacji ze zbioru uczącego. Wprowadzone wcześniej przez
#     kliknięcie nowe punkty nie powinny być używane do klasyfikacji kolejnych.
#
# Uwagi:
#     - W przypadku wszystkich plików zakładamy, że separatorem dziesiętnym jest kropka.
#     - Program musi mieć interfejs graficzny. Wszystkie operacje (wczytywanie i zapis plików, ustawianie parametrów itp.)
# 		muszą być wykonywane za pomocą odpowiednich elementów tego interfejsu.  
#     - Program można napisać w dowolnym języku programowania. Nie wolno jednak korzystać z pakietów i bibliotek zawierających gotowe
# 		implementacje algorytmu k-najbliższych sąsiadów.

? - "Normalizacja danych". Chodzi o wstępną obróbkę, np. odrzucenie dziwnych odczytów, czy dopasowanie skali wykresu do danych?
		Wstępna obróbka, dopasowanie skali też, ale to kolejny punkt.

? - Czy mogę skorzystać z biblioteki do wczytania pliku csv? Obliczenia potem robię sam.



# 2 ----
# W dowolnej technologii napisz aplikację z interfejsem graficznym wykonującą następujące zadania:
#
#   Wczytanie danych (użytkownik wybiera plik z danymi) ze standardowego pliku csv (separator ",", symbol dziesiętny ".").
# 	  Plik składa  się z trzech kolumn w przypadku regresji: prawdziwe dane, przewidywanie modelu 1, przewidywanie modelu
# 	  2 i 5 kolumn dla klasyfikacji: prawdziwe dane, przewidywanie modelu 1, prawdopodobieństwo klasy wyróżnionej w modelu 1,
# 	  przewidywanie modelu 2, prawdopodobieństwo klasy wyróżnionej w modelu 2. Plik zawiera nagłówek.
#   Wybór modelu przez użytkownika: klasyfikacyjny (klasyfikacji binarnej) lub regresyjny.
#     Ocena i porównanie jakości obu modeli:
#        W przypadku klasyfikacji tworzone są macierze pomyłek, wyznaczane najważniejsze jej wskaźniki (co najmniej: trafność,
# 		  czułość, swoistość, precyzja i wskaźnik f1), rysowane krzywe ROC i obliczane AUC. Dla każdego wskaźnika aplikacja powinna
# 		  wyróżniać lepszy model.
#        Dla regresji obliczane są współczynniki MAE, MAPE, MSE, RMSE i dla każdego wyróżniony jest model lepszy. Dodatkowym atutem
# 		 będzie histogram (wraz z krzywą normalną) różnic między wartościami rzeczywistymi i przewidywanymi przez model.
#
# Niezależnie od wyboru technologii nie można korzystać z pakietowych funkcji oceny jakości modeli (wszystkie współczynniki np. MSE,
#   trafność itd. oraz wykresy mają być stworzone ręcznie (w szczególności do narysowania krzywej ROC nie wolno stosować żadnego pakietu).
